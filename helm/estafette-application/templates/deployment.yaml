apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "estafette-application.nameWithTrack" . }}
  labels:
  {{- include "estafette-application.labels" . | nindent 4 }}
spec:
  {{- if eq (include "estafette-application.hasHpa" .) "false" }}
  replicas: {{ .Values.deployment.replicas }}
  {{- end}}
  progressDeadlineSeconds: {{ $.Values.deployment.progressDeadlineSeconds }}
  strategy:
    type: {{ .Values.deployment.strategyType }}
    {{- if eq .Values.deployment.strategyType "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.rollingUpdateMaxSurge }}
      maxUnavailable: {{ .Values.deployment.rollingUpdateMaxUnavailable }}

    {{- end}}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "estafette-application.appSelectorLabels" . | nindent 6 }}
      {{ include "estafette-application.trackSelectorLabel" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{ include "estafette-application.labels" . | nindent 8 }}
        {{ include "estafette-application.trackSelectorLabel" . | nindent 8 }}
      annotations:
        {{- if .Values.deployment.prometheusScrapeMetrics }}
        prometheus.io/scrape: "true"
        prometheus.io/path: {{ .Values.deployment.prometheusScrapePath | quote }}
        prometheus.io/port: {{ .Values.deployment.prometheusScrapePort | default .Values.deployment.containerPort | quote }}
        prometheus.io/scrape-nginx-sidecar: {{ .Values.sidecars.openresty.enabled | quote }}
        {{- end }}
        {{- if .Values.deployment.enablePayloadLogging }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- end}}
    spec:
      {{- $tolerations := include "estafette-application.tolerations" . -}}
      {{- if $tolerations }}
      tolerations: {{ $tolerations | indent 8 }}
      {{- end}}
      {{- if eq (include "estafette-application.hasImagePullSecret" .) "true" }}
      imagePullSecrets:
      - name: {{ $.Release.Name }}-image-pull-secret
      {{- end}}
      serviceAccount: {{ $.Release.Name }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "estafette-application.name" . }}
              topologyKey: kubernetes.io/hostname
        {{- if or .Values.deployment.tolerations.useWindowsNodes .Values.deployment.tolerations.preferPreemptibles }}
        nodeAffinity:
          {{- if .Values.deployment.tolerations.useWindowsNodes}}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - windows
          {{- end}}
          {{- if .Values.deployment.tolerations.preferPreemptibles }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: In
                values:
                - "true"
          {{- end}}
        {{- end}}
      {{- if .Values.deployment.initContainers }}
      initContainers:
{{ toYaml .Values.deployment.initContainers | indent 6 }}
      {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.deployment.image | required "deployment image is mandatory" }}:{{ .Values.deployment.tag | required "deployment image tag is mandatory" }}
        imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
        env:
        - name: "JAEGER_AGENT_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: "JAEGER_SAMPLER_MANAGER_HOST_PORT"
          value: "http://$(JAEGER_AGENT_HOST):5778/sampling"
        {{- range $key, $value := .Values.deployment.environmentVariables }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value := .Values.deployment.secretEnvironmentVariables }}
        - name: {{ $key | quote }}
          valueFrom:
            secretKeyRef:
              name: {{ include "estafette-application.nameWithTrack" . }}-secrets
              key: {{ $key }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.deployment.cpuRequest | default .Values.deployment.cpuLimit | default "100m" }}
            memory: {{ .Values.deployment.memoryRequest | default .Values.deployment.memoryLimit | default "128Mi" }}
          limits:
            {{- if  .Values.deployment.cpuLimit }}
            cpu: {{ .Values.deployment.cpuLimit }}
            {{- end }}
            memory: {{ .Values.deployment.memoryLimit | default .Values.deployment.memoryRequest | default "128Mi"  }}
        ports:
        - name: web
          containerPort: {{ .Values.deployment.containerPort }}
        {{- range .Values.deployment.additionalContainerPorts }}
        - name: {{ .name | required "additional port name is mandatory" }}
          containerPort: {{ .port| required "additional port number is mandatory" }}
          protocol: {{ .protocol| default "TCP" }}
        {{- end}}
        {{- if .Values.deployment.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.deployment.liveness.path}}
            port: {{ .Values.deployment.liveness.port | default .Values.deployment.containerPort }}
          initialDelaySeconds: {{ .Values.deployment.liveness.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.deployment.liveness.timeoutSeconds }}
          periodSeconds: {{ .Values.deployment.liveness.periodSeconds }}
          failureThreshold: {{ .Values.deployment.liveness.failureThreshold }}
          successThreshold: {{ .Values.deployment.liveness.successThreshold }}
        {{- end }}
        {{- if .Values.deployment.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.deployment.readiness.path }}
            port: {{ .Values.deployment.readiness.port | default .Values.deployment.containerPort }}
          initialDelaySeconds: {{ .Values.deployment.readiness.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.deployment.readiness.timeoutSeconds }}
          periodSeconds: {{ .Values.deployment.readiness.periodSeconds }}
          failureThreshold: {{ .Values.deployment.readiness.failureThreshold }}
          successThreshold: {{ .Values.deployment.readiness.successThreshold }}
        {{- end }}
        volumeMounts:
          {{- if eq (include "estafette-application.hasApplicationSecrets" .) "true" }}
        - name: app-secrets
          mountPath: {{ .Values.secrets.mountpath }}
        {{- end }}
        {{- if eq (include "estafette-application.hasConfigMaps" .) "true" }}
        - name: app-configs
          mountPath: {{ .Values.configmaps.mountpath }}
        {{- end }}
        {{- if $.Values.googleCloudCredentials.enabled }}
        - name: gcp-service-account
          mountPath: /gcp-service-account
        {{- end }}
        {{- if .Values.deployment.enablePayloadLogging }}
        - name: pod-log
          mountPath: /var/log/travix
        {{- end }}
        {{- if .Values.deployment.additionalVolumeMounts}}
{{ .Values.deployment.additionalVolumeMounts | toYaml | indent 8}}
        {{- end }}
        {{- if eq (include "estafette-application.prestopSleepEnabledByDefault" .) "true" }}
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sleep
              - {{ .Values.deployment.prestopSleepSeconds }}s
        {{- end}}
        {{- if $.Values.sidecars.openresty.enabled -}}
        {{- with $.Values.sidecars.openresty }}
      - name: {{ $.Release.Name }}-openresty
        image: {{ .image }}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: {{ .cpuRequest | default .cpuLimit | default "50m" }}
            memory: {{ .memoryRequest | default .memoryLimit | default "30Mi" }}
          limits:
            {{- if .cpuLimit }}
            cpu: {{ .cpuLimit }}
            {{- end }}
            memory: {{ .memoryLimit | default .memoryRequest | default "50Mi" }}
        ports:
        - name: http
          containerPort: 80
        {{- if eq (include "estafette-application.usesESP" $) "true" }}
        - name: https
          containerPort: 443
        {{- end}}
        - name: nginx-liveness
          containerPort: 82
        - name: nginx-readiness
          containerPort: 81
        - name: nginx-prom
          containerPort: 9101
        env:
        - name: "JAEGER_AGENT_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: "JAEGER_SAMPLER_MANAGER_HOST_PORT"
          value: "http://$(JAEGER_AGENT_HOST):5778/sampling"
        - name: "OFFLOAD_TO_HOST"
          value: "127.0.0.1"
        - name: "OFFLOAD_TO_PORT"
          value: {{ $.Values.deployment.containerPort | quote }}
        - name: "SERVICE_NAME"
          value: {{ $.Release.Name | quote }}
        - name: "NAMESPACE"
          value: {{ $.Release.Namespace | quote }}
        - name: "HEALT_CHECK_PATH"
          value:  {{ .healthcheckpath | quote }}
        - name: "GRACEFUL_SHUTDOWN_DELAY_SECONDS"
          value: {{ $.Values.deployment.prestopSleepSeconds | quote }}
        {{- if $.Values.ingress.allowHTTP }}
        - name: "ENFORCE_HTTPS"
          value: "false"
        {{- end}}
        {{- range $key, $value := .environmentVariables }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .secretEnvironmentVariables }}
        - name: {{ $key | quote }}
          valueFrom:
            secretKeyRef:
              name: {{ include "estafette-application.nameWithTrack" . }}-secrets
              key: {{ $key }}
          {{- end }}
        volumeMounts:
        - name: ssl-certificate
          mountPath: /etc/ssl/private
        livenessProbe:
          httpGet:
            path: /liveness
            port: nginx-liveness
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: {{ $.Values.deployment.readiness.path}}
            {{- if ne (include "estafette-application.usesESP" $) "true" }}
            port: https
            scheme: HTTPS
            {{- else }}
            port: http
            {{- end}}
          initialDelaySeconds: {{ $.Values.deployment.readiness.initialDelaySeconds }}
          timeoutSeconds: {{ $.Values.deployment.readiness.timeoutSeconds }}
          periodSeconds: {{ $.Values.deployment.readiness.periodSeconds }}
          failureThreshold: {{ $.Values.deployment.readiness.failureThreshold }}
          successThreshold: {{ $.Values.deployment.readiness.successThreshold }}
        {{- if .customProperties }}
{{.customProperties | toYaml | indent 8}}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if $.Values.sidecars.espv2.enabled | default (eq $.Values.ingress.visibility "espv2") }}
        {{- with $.Values.sidecars.espv2 }}
      - name: {{ $.Release.Name }}-esp*
        image: {{ .image }}
        imagePullPolicy: IfNotPresent
        args: [
          "--listener_port=8443",
          "--backend=http://127.0.0.1:80",
          "--service={{ index (include "estafette-application.hostnames" $ | splitList ",") 0 }}",
          "--service_account_key=/gcp-service-account/service-account-key.json",
          "--ssl_server_cert_path=/etc/envoy/ssl",
          "--http_request_timeout_s= {{ .requestTimeout | default $.Values.ingress.defaultTimeoutSeconds }}",
          {{- if .configId }}
          "--version={{ .configId }}"
          {{- else }}
          "--rollout_strategy=managed"
          {{- end }}
        ]
        resources:
          requests:
            cpu: {{ .cpuRequest | default .cpuLimit | default "50m" }}
            memory: {{ .memoryRequest | default .memoryLimit | default "30Mi" }}
          limits:
            {{- if .cpuLimit }}
            cpu: {{ .cpuLimit }}
            {{- end }}
            memory: {{ .memoryLimit | default .memoryRequest | default "50Mi" }}
        ports:
        - name: https
          containerPort: 8443
        - name: esp-status
          containerPort: 8090
        volumeMounts:
        - name: ssl-certificate-esp
          mountPath: /etc/envoy/ssl
        - name: gcp-service-account
          mountPath: /gcp-service-account
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sleep
              - {{ $.Values.deployment.prestopSleepSeconds }}s
        {{- if .customProperties }}
        {{.customProperties | toYaml | indent 8}}
        {{- end }}
        {{- end }}
        {{- else if $.Values.sidecars.esp.enabled | default (eq $.Values.ingress.visibility "esp") }}
        {{- with $.Values.sidecars.esp }}
      - name: {{ $.Release.Name }}-esp
        image: {{ .image }}
        imagePullPolicy: IfNotPresent
        args: [
          "--ssl_port", "8443",
          "--backend", "127.0.0.1:80",
          "--service={{ index (include "estafette-application.hostnames" $ | splitList ",") 0 }}",
          "--service_account_key", "/gcp-service-account/service-account-key.json",
          {{- if .configId }}
          "--version","{{ .configId }}"
          {{- else }}
          "--rollout_strategy", "managed"
          {{- end }}
        ]
        resources:
          requests:
            cpu: {{ .cpuRequest | default .cpuLimit | default "50m" }}
            memory: {{ .memoryRequest | default .memoryLimit | default "30Mi" }}
          limits:
            {{- if .cpuLimit }}
            cpu: {{ .cpuLimit }}
            {{- end }}
            memory: {{ .memoryLimit | default .memoryRequest | default "50Mi" }}
        ports:
        - name: https
          containerPort: 8443
        - name: esp-status
          containerPort: 8090
        volumeMounts:
        - name: ssl-certificate-esp
          mountPath: /etc/nginx/ssl
        - name: gcp-service-account
          mountPath: /gcp-service-account
        livenessProbe:
          httpGet:
            path: /healthz
            port: esp-status
          initialDelaySeconds: 15
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sleep
              - {{ $.Values.deployment.prestopSleepSeconds }}s
        {{- if .customProperties }}
        {{.customProperties | toYaml | indent 8}}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if $.Values.sidecars.cloudsqlproxy.enabled }}
        {{- with $.Values.sidecars.cloudsqlproxy }}
      - name: {{ $.Release.Name}}-cloudsql-proxy
        image: {{ .image }}
        env:
          {{- range $key, $value := .environmentVariables }}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
            {{- end }}
          {{- range $key, $value := .secretEnvironmentVariables }}
          - name: {{ $key | quote }}
            valueFrom:
              secretKeyRef:
                name: {{ include "estafette-application.nameWithTrack" . }}-secrets
                key: {{ $key }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .cpuRequest | default .cpuLimit | default "50m" }}
            memory: {{ .memoryRequest | default .memoryLimit | default "30Mi" }}
          limits:
            {{- if .cpuLimit }}
            cpu: {{ .cpuLimit }}
            {{- end }}
            memory: {{ .memoryLimit | default .memoryRequest | default "50Mi" }}
        command: ["/cloud_sql_proxy",
                  "-instances={{ .dbinstanceconnectionname | required "the database instance connection name is mandatory" }}=tcp:{{ .sqlproxyport }}",
                  "-credential_file=/gcp-service-account/service-account-key.json",
                  "-term_timeout={{.sqlproxyterminationtimeoutseconds }}s"]
          {{- if $.Values.googleCloudCredentials.enabled }}
        volumeMounts:
          - name: gcp-service-account
            mountPath: /gcp-service-account
          {{- end }}
        {{- if .customProperties }}
        {{.customProperties | toYaml | indent 8}}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- if $.Values.sidecars.additionalSidecars }}
{{ $.Values.sidecars.additionalSidecars | toYaml | indent 6}}
      {{- end}}
      terminationGracePeriodSeconds: 300
      volumes:
      {{- if eq (include "estafette-application.hasSslCertificate" .) "true" }}
      - name: ssl-certificate
        secret:
          secretName: {{ include "estafette-application.tlsCertificateSecretName" .}}
      {{- end }}
      {{- if eq (include "estafette-application.usesESP" .) "true" }}
      - name: ssl-certificate-esp
        secret:
          secretName: {{ include "estafette-application.tlsCertificateSecretName" .}}
          items:
          - key: ssl.crt
            path: nginx.crt
          - key: ssl.key
            path: nginx.key
          - key: ssl.crt
            path: server.crt
          - key: ssl.key
            path: server.key
      {{- end }}
      {{- if eq (include "estafette-application.hasApplicationSecrets" .) "true" }}
      - name: app-secrets
        secret:
          secretName: {{ include "estafette-application.nameWithTrack" . }}-secrets
      {{- end }}
            {{- if eq (include "estafette-application.hasConfigMaps" .) "true" }}
      - name: app-configs
        configMap:
          name:  {{ include "estafette-application.nameWithTrack" . }}-configs
      {{- end }}
      {{- if $.Values.googleCloudCredentials.enabled }}
      - name: gcp-service-account
        secret:
          secretName: {{ include "estafette-application.googleCloudCredentialsAppName" . }}-gcp-service-account
      {{- end }}
      {{- if .Values.deployment.enablePayloadLogging }}
      - name: pod-log
        hostPath:
          path: /var/log/fluentd-payload-logger/{{ .Release.Name }}
          type: DirectoryOrCreate
      - name: var-log
        hostPath:
          path: /var/log
      {{- end }}
  {{- if .Values.deployment.additionalVolumes}}
{{ .Values.deployment.additionalVolumes | toYaml | indent 6}}
  {{- end }}